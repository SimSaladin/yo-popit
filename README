PVL yo-popit
============

Requirements
------------

### Streaming


- *cron*
- *mpd* (recent enough, need HTTP streaming support)
- *mpc* (interacting with mpd from scripts)
- *vlc* (to construct a fully synced rtp/rtsp stream)
- *mplayer* (used to parse lengths of songs. TODO: could use mediainfo (or sox?))
- *sox* (get_files.sh, to remove preceding and trailing silence)
- *smbclient* (get_files.sh: get files via samba)

### Clients

- *cron*
- *mplayer2* (mplayer1 has problems with rtsp streams; the stream shears after a few seconds)

Step 0: Setup
-------------

Setup parameters in file settings.

Start MPD with the provided config: `mpd mpdconf`.

Step 1: Fetch music from samba
------------------------------

To fetch the music files from a samba share run the script `get_files.sh`:

      get-files.sh <server> <share> <dir> <username> [<password>]
      get-files.sh NETDISK work YO-popit-K13 *****

This fetches music via samba to the **music/** directory.

Next run `master_files.sh <music directory>`, which removes silence from the
files. Note that this uses `sox`, which doesn't support some exotic formats such
as ape or m4a. run the script with no arguments to get help for these (tl;dr:
convert via `shnconv`).

The output folder will be `<music directory>-mastered`.

Step 2: Construct the playlist
------------------------------

By streaming a track of silence we give clients time to connect before the music
stream.  There is a default 5min music/silence.ogg, which is added to the
beginning of all generated playlists. The file can be changed in *settings*.

Run the playlist generator script with appropriate arguments:

      $ bin/generate_playlist.sh --help
      $ ...
      $ generate_playlist.sh ./music --last final_countdown.flac

NOTE: there's a problem with --require: it doesn't exclude the files from the
      randomized part.

NOTE: This script could be made better: it should not recalculate the song
      lengths on every run, instead cache them. Also, some file are saved to
      /tmp/.

Step 3: Timing the stream
-------------------------

Timing the stream is done via cron. The script `bin/set_wake.sh PLAYLIST`
overwrites the crontab of the current user. Example: `bin/set_wake.sh
playlist.m3u`.

Step 4: Testing
---------------

Start streaming a playlist with `bin/start_stream.sh PLAYLIST`.  Test the stream
with `mplayer rtsp://HOST:PORT/stream.sdp`.  Default port is 8183.

Step 5: Clients
---------------

Clients must have:
a) Clocks synced (NTP)
b) Cron running
c) Mplayer2 available

To setup the stream set the two parameters in the `client_script.sh`, and run it
on every client. It will check points b and c, and set the appropriate cron job.
The cron job cleans self up when done.

An easy way to run the script on clients is to serve it from a HTTP server at
$URL, and then on every client just run

      $ wget $URL -O- | bash

NOTE: Repeat the previous testing step for every client. Make sure that the
      stream works, and that sound volume is good.
