PVL yo-popit
============

Requirements
------------

On the server:

- *cron*
- *mpd* (recent enough, need HTTP streaming support)
- *vlc* (to construct a fully synced rtp/rtsp stream)
- *mplayer* (used to parse lengths of songs. TODO: could use mediainfo (or sox?))
- *sox* (get-files.sh, to remove preceding and trailing silence)
- *smbclient* (get-files.sh: get files via samba) OPTIONAL

On clients:

- *cron*
- *mplayer2* (mplayer1 has problems with rtsp streams; the stream shears after a
              few seconds)


Preparing the music files
---------------------------------

To fetch the music files from a samba share run the script `get-files.sh`:

      get-files.sh <server> <share> <dir> <username> [<password>]
      get-files.sh NETDISK work YO-popit-K13 *****

This fetches music via samba to the music/ directory.

Next run `master_files.sh <music directory>`, which removes silence from the
files in directory `<music directory>`. Note that this uses `sox`, which doesn't
support some exotic formats such as ape or m4a. run the script with no arguments
for help with these (convert via `shnconv`).

The output folder is `<music directory>-mastered`.


Constructing a playlist
-----------------------

First, make sure you have file named silence.m3u in the root (/opt/pvl-mpd).
This file should be a playlist file, which plays 1 HOUR of silence. For example
if you have 5 minutes long silence.mp3 in /opt/pvl-mpd/music, the contents of
the silence.m3u would be 12 lines identical to this:

      /opt/pvl-mpd/music/silence.mp3

Now run the playlist generator script with appropriate arguments:

      $ cd /opt/pvl-mpd
      $ ./generate-playlist.sh --help
      WARNING: no silence.m3u file

      generate_playlist.sh [options] DIRECTORY [args]

      DIRECTORY should point to the files to randomize among.

      options:
        --debug     | Run in debug mode.
        --help, -h  | Show this help.

      arguments:
        --last,    -l FILE  | Append a song last.
        --first,   -f FILE  | Insert a song to the beginning.
        --require, -r FILE  | Require a file included.

      example:
        generate_playlist.sh ./music --last final_countdown.flac

      known bugs:  !! IMPORTANT !!
        * remember to pass at least one --first or --last, or awk will
          fail in a mystic manner :)

As an example something along the lines of

      generate_playlist.sh music/YO-popit-K13-masterd \
         --last music/01\ -\ The\ Final\ Countdown.flac \
         --first music/KaW\ -\ Dawn.mp3

NOTE: there's a problem with --require: it doesn't exclude the files from the
      randomized part.

NOTE: This script could be made better: it should not recalculate the song
      lengths on every run. Instead cache them. Also, /tmp/* files are used.

The script should have created a playlist named `playlist`. Launch ncmpcpp or
similar and check the playlist, or just use `cat`.

Timing the stream
-----------------

Test the stream by running `play.sh <playlist>`.

Add this to your crontab with `crontab -e`.  Remember to account for the 1 hour
of silence!

Here the silence begin playing at 7:00 and the actual music at 8:00. The
argument for the play.sh is a playlist in the `playlist` directory:

      0 7 * * * /opt/yo-popit/play.sh playlist

Setup the clients
-----------------

Run the script client-script.sh on the client. You can serve it from a network
location, wget and pipe it to sh:

      wget http://hostname/script.sh -qO- | sh

The script makes sure you have the right version of mplayer, cron is running and
rewrites your crontab.

NOTE: Remember to test the mplayer command beforehand!
